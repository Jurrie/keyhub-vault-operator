/*
Copyright 2020.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"time"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	keyhubv1alpha1 "github.com/topicusonderwijs/keyhub-vault-operator/api/v1alpha1"
	controllerMetrics "github.com/topicusonderwijs/keyhub-vault-operator/controllers/metrics"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/metrics"

	dto "github.com/prometheus/client_model/go"

	controllers_test "github.com/topicusonderwijs/keyhub-vault-operator/controllers/test"
)

var _ = Describe("KeyHubSecret Controller", func() {

	const timeout = time.Second * 10
	const interval = time.Second * 1

	var manifestToLog interface{}

	BeforeEach(func() {
		manifestToLog = nil

		// Flush caches
		policyEngine.Flush()
		vaultIndexCache.Flush()

		// Failed test runs that don't clean up leave resources behind.
		cfg := controllers_test.BeforeEachInputs{Client: k8sClient}
		controllers_test.CleanUp(&cfg)

		// Reset Prometheus collectors
		controllerMetrics.Reset()
	})

	AfterEach(func() {
		// Add any teardown steps that needs to be executed after each test
		controllers_test.LogManifest(manifestToLog)
	})

	Context("Status fields", func() {
		It("Should set status fields correctly", func() {
			spec := keyhubv1alpha1.KeyHubSecretSpec{
				Data: []keyhubv1alpha1.SecretKeyReference{
					{Name: "username", Record: "1001-0002", Property: "username"},
				},
			}

			key := types.NamespacedName{
				Name:      "sample-ks",
				Namespace: "default",
			}

			toCreate := &keyhubv1alpha1.KeyHubSecret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "sample-ks",
					Namespace: "default",
				},
				Spec: spec,
			}

			By("By creating a new KeyHubSecret")
			Expect(k8sClient.Create(context.Background(), toCreate)).Should(Succeed())

			By("By checking the Secret is created correctly")
			fetched := &corev1.Secret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetched)

				return fetched.Type == corev1.SecretTypeOpaque &&
					len(fetched.Data) > 0 &&
					string(fetched.Data["username"]) == "admin"

			}, timeout, interval).Should(BeTrue())

			By("By checking the KeyHubSecret status")
			fetchedKeyHubSecret := &keyhubv1alpha1.KeyHubSecret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetchedKeyHubSecret)

				records := fetchedKeyHubSecret.Status.VaultRecordStatuses
				keys := fetchedKeyHubSecret.Status.SecretKeyStatuses

				return len(records) == 1 && len(keys) == 1 &&
					records[0].RecordID == "1001-0002" &&
					records[0].Name == "Username + password" &&
					keys[0].Key == "username" &&
					len(keys[0].Hash) > 0

			}, timeout, interval).Should(BeTrue())

			pretty, _ := json.MarshalIndent(fetchedKeyHubSecret.Status, "", "\t")
			fmt.Fprintf(GinkgoWriter, "Secret resource:\n%s\n", pretty)

			metrics, _ := metrics.Registry.Gather()
			for _, metric := range metrics {
				if "keyhub_request_total" == *metric.Name {
					fmt.Fprintf(GinkgoWriter, "Metric %s: %v\n", *metric.Name, metric.GetMetric()[0].Counter.GetValue())

				}
			}

			Expect(false).To(Equal(true))

			By("Deleting the KeyHubSecret and Secret")
			Eventually(func() error {
				f := &keyhubv1alpha1.KeyHubSecret{}
				k8sClient.Get(context.Background(), key, f)
				return k8sClient.Delete(context.Background(), f)
			}, timeout, interval).Should(Succeed())
			Eventually(func() error {
				f := &corev1.Secret{}
				k8sClient.Get(context.Background(), key, f)
				return k8sClient.Delete(context.Background(), f)
			}, timeout, interval).Should(Succeed())
		})

		It("Should handle KeyHubSecret updates correctly", func() {
			spec := keyhubv1alpha1.KeyHubSecretSpec{
				Data: []keyhubv1alpha1.SecretKeyReference{
					{Name: "username", Record: "1001-0002", Property: "username"},
					{Name: "pkey", Record: "1001-0004", Property: "username"},
				},
			}

			key := types.NamespacedName{
				Name:      "sample-ks",
				Namespace: "default",
			}

			toCreate := &keyhubv1alpha1.KeyHubSecret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "sample-ks",
					Namespace: "default",
				},
				Spec: spec,
			}

			By("By creating a new KeyHubSecret")
			Expect(k8sClient.Create(context.Background(), toCreate)).Should(Succeed())

			By("By checking the Secret is created correctly")
			fetched := &corev1.Secret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetched)
				manifestToLog = fetched

				return fetched.Type == corev1.SecretTypeOpaque &&
					len(fetched.Data) == 2 &&
					string(fetched.Data["username"]) == "admin" &&
					string(fetched.Data["pkey"]) == "private.example.io"

			}, timeout, interval).Should(BeTrue())
			manifestToLog = nil

			By("By checking the KeyHubSecret status")
			var recordStatus keyhubv1alpha1.VaultRecordStatus
			fetchedKeyHubSecret := &keyhubv1alpha1.KeyHubSecret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetchedKeyHubSecret)
				manifestToLog = fetchedKeyHubSecret

				records := fetchedKeyHubSecret.Status.VaultRecordStatuses
				keys := fetchedKeyHubSecret.Status.SecretKeyStatuses

				if len(records) != 2 && len(keys) != 2 {
					return false
				}

				recordStatus = records[0]
				return recordStatus.RecordID == "1001-0002" &&
					recordStatus.Name == "Username + password" &&
					keys[0].Key == "username" &&
					len(keys[0].Hash) > 0
			}, timeout, interval).Should(BeTrue())
			manifestToLog = nil

			By("Adding a key to the Secret")
			fetched.Data["custom"] = []byte("app_added_value")
			k8sClient.Update(context.Background(), fetched)

			By("By checking the Secret is updated correctly")
			fetched = &corev1.Secret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetched)
				manifestToLog = fetched

				return fetched.Type == corev1.SecretTypeOpaque &&
					len(fetched.Data) == 3 &&
					string(fetched.Data["username"]) == "admin" &&
					string(fetched.Data["pkey"]) == "private.example.io" &&
					string(fetched.Data["custom"]) == "app_added_value"
			}, timeout, interval).Should(BeTrue())
			manifestToLog = nil

			By("By updating the KeyHubSecret")
			fetchedKeyHubSecret.Spec.Data = []keyhubv1alpha1.SecretKeyReference{
				{Name: "username", Record: "1001-0003", Property: "username"},
				{Name: "cacerts", Record: "1001-0005", Property: "username"},
			}
			k8sClient.Update(context.Background(), fetchedKeyHubSecret)

			By("By checking the Secret is updated correctly")
			fetched = &corev1.Secret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetched)
				manifestToLog = fetched

				return fetched.Type == corev1.SecretTypeOpaque &&
					len(fetched.Data) == 3 &&
					string(fetched.Data["username"]) == "example.io" &&
					string(fetched.Data["cacerts"]) == "ca_certs" &&
					string(fetched.Data["custom"]) == "app_added_value"
			}, timeout, interval).Should(BeTrue())
			manifestToLog = nil

			By("By checking the KeyHubSecret status is updated")
			fetchedKeyHubSecret = &keyhubv1alpha1.KeyHubSecret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetchedKeyHubSecret)
				manifestToLog = fetchedKeyHubSecret

				records := fetchedKeyHubSecret.Status.VaultRecordStatuses
				keys := fetchedKeyHubSecret.Status.SecretKeyStatuses

				if len(records) != 2 && len(keys) != 2 {
					return false
				}

				return records[0].RecordID == "1001-0003" &&
					records[0].Name == "Certificate" &&
					//records[0].LastModifiedAt.After(recordStatus.LastModifiedAt.Time) &&
					records[1].RecordID == "1001-0005" &&
					records[1].Name == "CA Certs" &&
					keys[0].Key == "username" &&
					len(keys[0].Hash) > 0 &&
					keys[1].Key == "cacerts" &&
					len(keys[1].Hash) > 0
			}, timeout, interval).Should(BeTrue())
			manifestToLog = nil

			metrics, _ := metrics.Registry.Gather()
			for _, metric := range metrics {
				if "keyhub_request_total" == *metric.Name {
					fmt.Fprintf(GinkgoWriter, "Metric %s: %v\n", *metric.Name, metric.GetMetric()[0].Counter.GetValue())

				}
			}

			By("Deleting the KeyHubSecret and Secret")
			Eventually(func() error {
				f := &keyhubv1alpha1.KeyHubSecret{}
				k8sClient.Get(context.Background(), key, f)
				return k8sClient.Delete(context.Background(), f)
			}, timeout, interval).Should(Succeed())
			Eventually(func() error {
				f := &corev1.Secret{}
				k8sClient.Get(context.Background(), key, f)
				return k8sClient.Delete(context.Background(), f)
			}, timeout, interval).Should(Succeed())
		})

		It("Should not make excessive api calls to KeyHub", func() {
			spec := keyhubv1alpha1.KeyHubSecretSpec{
				Template: keyhubv1alpha1.SecretTemplate{
					Metadata: keyhubv1alpha1.SecretTemplateMetadata{
						Labels: map[string]string{
							"iteration": "0",
						},
					},
				},
				Data: []keyhubv1alpha1.SecretKeyReference{
					{Name: "username", Record: "1001-0002", Property: "username"},
				},
			}

			key := types.NamespacedName{
				Name:      "sample-ks",
				Namespace: "default",
			}

			toCreate := &keyhubv1alpha1.KeyHubSecret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "sample-ks",
					Namespace: "default",
				},
				Spec: spec,
			}

			By("By checking the metrics are reset")
			var keyhubApiRequests *dto.Counter
			collectedMetrics, _ := metrics.Registry.Gather()
			for _, metric := range collectedMetrics {
				if "keyhub_request_total" == *metric.Name {
					keyhubApiRequests = metric.GetMetric()[0].Counter
				}
			}
			Expect(keyhubApiRequests).ToNot(BeNil())
			Expect(keyhubApiRequests.GetValue()).To(Equal(0.0))

			By("By creating a new KeyHubSecret")
			Expect(k8sClient.Create(context.Background(), toCreate)).Should(Succeed())

			By("By checking the Secret is created correctly")
			fetched := &corev1.Secret{}
			Eventually(func() bool {
				k8sClient.Get(context.Background(), key, fetched)
				manifestToLog = fetched

				return fetched.Type == corev1.SecretTypeOpaque &&
					len(fetched.Data) == 1 &&
					string(fetched.Data["username"]) == "admin"
			}, timeout, interval).Should(BeTrue())
			manifestToLog = nil

			var allowedKeyhubApiCalls float64 = 0.0
			By("By repeatedly triggering a reconcile")
			for i := 1; i <= 7; i++ {
				By("By setting the 'iteration' label")
				fetchedKeyHubSecret := &keyhubv1alpha1.KeyHubSecret{}
				k8sClient.Get(context.Background(), key, fetchedKeyHubSecret)
				fetchedKeyHubSecret.Spec.Template.Metadata.Labels["iteration"] = strconv.Itoa(i)
				k8sClient.Update(context.Background(), fetchedKeyHubSecret)

				By("By checking the Secret is updated correctly")
				fetched := &corev1.Secret{}
				Eventually(func() bool {
					k8sClient.Get(context.Background(), key, fetched)
					manifestToLog = fetched

					return fetched.Type == corev1.SecretTypeOpaque &&
						len(fetched.Data) == 1 &&
						string(fetched.Data["username"]) == "admin" &&
						len(fetched.Labels) == 1 &&
						fetched.Labels["iteration"] == strconv.Itoa(i)
				}, timeout, interval).Should(BeTrue())
				manifestToLog = nil

				By(fmt.Sprintf("Checking the number of KeyHub API calls (iteration %d)", i))
				var actualKeyhubApiCalls float64 = 0.0
				collectedMetrics, _ := metrics.Registry.Gather()
				for _, metric := range collectedMetrics {
					if "keyhub_request_total" == *metric.Name {
						actualKeyhubApiCalls = metric.GetMetric()[0].Counter.GetValue()
					}
				}
				if i == 1 {
					fmt.Fprintf(GinkgoWriter, "Initial number of KeyHub API requests: %.0f\n", actualKeyhubApiCalls)
					allowedKeyhubApiCalls = actualKeyhubApiCalls
				} else {
					fmt.Fprintf(GinkgoWriter, "Total number of KeyHub API requests (iteration %d): expected=%.0f, actual=%.0f\n", i, allowedKeyhubApiCalls, actualKeyhubApiCalls)
					Expect(actualKeyhubApiCalls).To(Equal(allowedKeyhubApiCalls))
				}
			}

			collectedMetrics, _ = metrics.Registry.Gather()
			for _, metric := range collectedMetrics {
				if "keyhub_request_total" == *metric.Name {
					fmt.Fprintf(GinkgoWriter, "Metric %s: %v\n", *metric.Name, metric.GetMetric()[0].Counter.GetValue())

				}
			}

			Expect(false).To(Equal(true))

			By("Deleting the KeyHubSecret and Secret")
			Eventually(func() error {
				f := &keyhubv1alpha1.KeyHubSecret{}
				k8sClient.Get(context.Background(), key, f)
				return k8sClient.Delete(context.Background(), f)
			}, timeout, interval).Should(Succeed())
			Eventually(func() error {
				f := &corev1.Secret{}
				k8sClient.Get(context.Background(), key, f)
				return k8sClient.Delete(context.Background(), f)
			}, timeout, interval).Should(Succeed())
		})
	})
})
